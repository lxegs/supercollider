{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf2 //pointillistic sound @hangar 101008-101010  /f0\cf3 \
\
\
\cf2 //friday\cf3 \
\cf2 //saturday\cf3 \
\cf2 //sunday\cf3 \
\
friday: basics - overview - synthdef - synthesis\
saturday: routines - global control over the grains\
sunday: multichannel - gui - network\
\
\
\cf2 //two programs\cf3 \
sclang\
scserver\
\
\
s.boot		\cf2 //starts scserver\cf3 \
\
(\
\cf4 SynthDef\cf3 (\cf5 \\one\cf3 , \{\cf4 |freq= 500, amp= 0.1, release= 0.4|\cf3 \
	\cf4 var\cf3  src= \cf4 SinOsc\cf3 .ar(freq, 0, amp);\
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(0.01, release), doneAction:2);\
	\cf4 Out\cf3 .ar(0, src*env);\
\}).add;\
)\
\
\cf2 //now we create a synth object from the definition\cf3 \
\
\cf4 Synth\cf3 (\cf5 \\one\cf3 )\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\release\cf3 , 2])\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\freq\cf3 , 600, \cf5 \\amp\cf3 , 0.2, \cf5 \\release\cf3 , 3])\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\freq\cf3 , 1600, \cf5 \\amp\cf3 , 0.3, \cf5 \\release\cf3 , 0.03])\
\
\
\cf2 //write another synthdef with stereo out and more arguments\cf3 \
(\
\cf4 SynthDef\cf3 (\cf5 \\two\cf3 , \{\cf4 |freq= 700, amp= 0.2, pan= 0, atk= 0.01, rel= 0.1, numharm= 5|\cf3 \
	\cf4 var\cf3  src= \cf4 Blip\cf3 .ar(freq, numharm);\
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(atk, rel), doneAction:2);\
	\cf4 Out\cf3 .ar(0, \cf4 Pan2\cf3 .ar(src*env*amp, pan));\
\}).add;\
)\
\
\cf4 Synth\cf3 (\cf5 \\two\cf3 )\
\cf4 Synth\cf3 (\cf5 \\two\cf3 , [\cf5 \\atk\cf3 , 1, \cf5 \\rel\cf3 , 2, \cf5 \\freq\cf3 , 200, \cf5 \\numharm\cf3 , 2])\
\cf4 Synth\cf3 (\cf5 \\two\cf3 , [\cf5 \\atk\cf3 , 1, \cf5 \\rel\cf3 , 0.01, \cf5 \\freq\cf3 , 300, \cf5 \\numharm\cf3 , 20])\
\
\cf4 Synth\cf3 (\cf5 \\two\cf3 , [\cf5 \\atk\cf3 , 1, \cf5 \\rel\cf3 , 0.01, \cf5 \\freq\cf3 , 300, \cf5 \\numharm\cf3 , 2])\
\cf4 Synth\cf3 (\cf5 \\one\cf3 )\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\freq\cf3 , 800])\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\freq\cf3 , 900])\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\freq\cf3 , 1000])\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\freq\cf3 , 1100])\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\freq\cf3 , 1200, \cf5 \\release\cf3 , 2])\
\cf4 Synth\cf3 (\cf5 \\two\cf3 , [\cf5 \\freq\cf3 , 1200, \cf5 \\rel\cf3 , 2])\
\
\cf2 //select Blip and press cmd+d to open Blip helpfile\cf3 \
\
\cf4 Synth\cf3 (\cf5 \\two\cf3 , [\cf5 \\freq\cf3 , 900, \cf5 \\atk\cf3 , 0.2, \cf5 \\rel\cf3 , 0])\
\cf4 Synth\cf3 (\cf5 \\two\cf3 , [\cf5 \\freq\cf3 , 90, \cf5 \\atk\cf3 , 0.2, \cf5 \\rel\cf3 , 0, \cf5 \\numharm\cf3 , 3])\
\cf4 Synth\cf3 (\cf5 \\two\cf3 , [\cf5 \\freq\cf3 , 190, \cf5 \\atk\cf3 , 0.2, \cf5 \\rel\cf3 , 0, \cf5 \\numharm\cf3 , 3])\
\cf4 Synth\cf3 (\cf5 \\two\cf3 , [\cf5 \\freq\cf3 , 190, \cf5 \\atk\cf3 , 0.2, \cf5 \\rel\cf3 , 0, \cf5 \\numharm\cf3 , 4])\
\
\
\
\cf2 //a third synthdef with noise and a filter\cf3 \
\
(\
\cf4 SynthDef\cf3 (\cf5 \\three\cf3 , \{\cf4 |freq= 987, amp= 0.1, bw= 0.4|\cf3 \
	\cf4 var\cf3  src= \cf4 WhiteNoise\cf3 .ar(amp);\
	\cf4 var\cf3  efx= \cf4 BPF\cf3 .ar(src, freq, bw);\
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(0.01, 0.7), doneAction:2);\
	\cf4 Out\cf3 .ar(0, \cf4 Pan2\cf3 .ar(efx*env, \cf4 SinOsc\cf3 .kr(10)));\
\}).add;\
)\
\
\cf4 Synth\cf3 (\cf5 \\three\cf3 , [\cf5 \\amp\cf3 , 0.5])\
\cf4 Synth\cf3 (\cf5 \\three\cf3 , [\cf5 \\freq\cf3 , 9000, \cf5 \\amp\cf3 , 1])\
\cf4 Synth\cf3 (\cf5 \\three\cf3 , [\cf5 \\freq\cf3 , 1200, \cf5 \\amp\cf3 , 4, \cf5 \\bw\cf3 , 0.005])\
\
\
\
\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\freq\cf3 , 9000.rand, \cf5 \\amp\cf3 , 0.5])\
\cf4 Synth\cf3 (\cf5 \\one\cf3 , [\cf5 \\freq\cf3 , 90.rrand(500), \cf5 \\amp\cf3 , 0.5])\
\
\cf4 Randomness\cf3 		\cf2 //recommended reading this helpfile\cf3 \
\
500.rand			\cf2 //integer\cf3 \
500.0.rand		\cf2 //float\cf3 \
\
\cf4 SimpleNumber\cf3 	\cf2 //recommended reading this helpfile as well\cf3 \
\
60.midicps		\cf2 //convert from midi note to hz\cf3 \
440.cpsmidi\
\
0.5.linlin(0, 1, 500, 5000)\
0.5.linexp(0, 1, 500, 5000)\
\
\cf2 //advanced - also ugens can use linexp and linlin\cf3 \
\cf4 SinOsc\cf3 .ar(500, 0, 0.1).linexp(-0.1, 0.1, 50, 5000)\
\
\
\
\cf2 //phase modulation\cf3 \
\
(\
\cf4 SynthDef\cf3 (\cf5 \\four\cf3 , \{\cf4 |out= 0, fff= 500, mmm= 500, aaa= 0.5|\cf3 \
	\cf4 var\cf3  src= \cf4 SinOsc\cf3 .ar(0, \cf4 SinOsc\cf3 .ar(fff, 0, mmm), aaa);\
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(0.01, 0.8), doneAction:2);\
	\cf4 Out\cf3 .ar(out, \cf4 Pan2\cf3 .ar(src*env));\
\}).add;\
)\
\
\cf4 Synth\cf3 (\cf5 \\four\cf3 )	\
\cf4 Synth\cf3 (\cf5 \\four\cf3 , [\cf5 \\fff\cf3 , 150, \cf5 \\mmm\cf3 , pi+0.7])\
\cf4 Synth\cf3 (\cf5 \\four\cf3 , [\cf5 \\fff\cf3 , 450, \cf5 \\mmm\cf3 , 6])\
\cf4 Synth\cf3 (\cf5 \\four\cf3 , [\cf5 \\fff\cf3 , 450, \cf5 \\mmm\cf3 , 10.0.rand])\
\cf4 Synth\cf3 (\cf5 \\four\cf3 , [\cf5 \\fff\cf3 , 60.rrand(66).midicps, \cf5 \\mmm\cf3 , 10.0.rand])\
\
\cf2 //use non descriptive argument names can help to explore more freely\cf3 \
\
\
\cf2 //a comb delay effect\cf3 \
(\
\cf4 SynthDef\cf3 (\cf5 \\comb\cf3 , \{\cf4 |del= 0.3, dec= 2|\cf3 \
	\cf4 var\cf3  src= \cf4 InFeedback\cf3 .ar(50, 2);\
	\cf4 var\cf3  efx= src+\cf4 CombN\cf3 .ar(src, 1, del, dec);\
	\cf4 Out\cf3 .ar(0, efx);\
\}).add;\
)\
a= \cf4 Synth\cf3 (\cf5 \\comb\cf3 )		\cf2 //start effect on bus 50\cf3 \
\cf4 Synth\cf3 (\cf5 \\four\cf3 , [\cf5 \\fff\cf3 , 150, \cf5 \\mmm\cf3 , 4, \cf5 \\out\cf3 , 50])	\cf2 //play synth on bus 50\cf3 \
a.set(\cf5 \\del\cf3 , 0.1)\
\cf4 Synth\cf3 (\cf5 \\four\cf3 , [\cf5 \\fff\cf3 , 150, \cf5 \\mmm\cf3 , 4, \cf5 \\out\cf3 , 50])\
a.set(\cf5 \\del\cf3 , 0.05)\
a.set(\cf5 \\dec\cf3 , 0.4)\
\cf4 Synth\cf3 (\cf5 \\four\cf3 , [\cf5 \\fff\cf3 , 150, \cf5 \\mmm\cf3 , 4, \cf5 \\out\cf3 , 50])\
a.free		\cf2 //stop effect\cf3 \
\
\
\
\
\cf2 //using a bandpassfiltered sawtooth as phase modulator signal\cf3 \
(\
\cf4 SynthDef\cf3 (\cf5 \\five\cf3 , \{\cf4 |fff= 500, mmm= 400, aaa= 0.3, blue= 0, green= 700, red= 0.4, atk= 0.01, rel= 0.7|\cf3 \
	\cf4 var\cf3  src= \cf4 SinOsc\cf3 .ar(blue, \cf4 BPF\cf3 .ar(\cf4 Saw\cf3 .ar(fff, mmm), green, red), aaa);\
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(atk, rel), doneAction:2);\
	\cf4 Out\cf3 .ar(0, \cf4 Pan2\cf3 .ar(src*env));\
\}).add;\
)\
\
\cf4 Synth\cf3 (\cf5 \\five\cf3 )	\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 300, \cf5 \\mmm\cf3 , 40])\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 300, \cf5 \\mmm\cf3 , 2pi])\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 400, \cf5 \\mmm\cf3 , 2pi])\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 50, \cf5 \\mmm\cf3 , 50])\
\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 100, \cf5 \\mmm\cf3 , 40, \cf5 \\blue\cf3 , 6, \cf5 \\green\cf3 , 98])\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 80, \cf5 \\mmm\cf3 , 30, \cf5 \\blue\cf3 , 60, \cf5 \\green\cf3 , 198, \cf5 \\red\cf3 , 1])\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 80, \cf5 \\mmm\cf3 , 30, \cf5 \\blue\cf3 , 60, \cf5 \\green\cf3 , 198, \cf5 \\red\cf3 , 0.1])\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 80, \cf5 \\mmm\cf3 , 300, \cf5 \\blue\cf3 , 60, \cf5 \\green\cf3 , 198, \cf5 \\red\cf3 , 0.1])\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 80, \cf5 \\mmm\cf3 , 300, \cf5 \\blue\cf3 , 160, \cf5 \\green\cf3 , 98, \cf5 \\red\cf3 , 0.1])\
\cf4 Synth\cf3 (\cf5 \\five\cf3 , [\cf5 \\fff\cf3 , 80, \cf5 \\mmm\cf3 , 300, \cf5 \\blue\cf3 , 160, \cf5 \\green\cf3 , 98, \cf5 \\red\cf3 , 0.1, \cf5 \\atk\cf3 , 0.4, \cf5 \\rel\cf3 , 0.1])\
\
\cf2 //same thing here with non descriptive names\cf3 \
\
\
\
\
\cf2 //some binary operators\cf3 \
+ - / * %\
sqrt\
round\
floor\
< >\
\
(\
\cf4 SynthDef\cf3 (\cf5 \\six\cf3 , \{\cf4 |freq= 500, amp= 0.4|\cf3 \
	\cf4 var\cf3  src= \cf4 SinOsc\cf3 .ar(freq)<\cf4 SinOsc\cf3 .ar(\cf4 SinOsc\cf3 .ar(5)*15);\
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(0.05, 0.8), doneAction:2);\
	\cf4 Out\cf3 .ar(0, \cf4 Pan2\cf3 .ar(src*env));\
\}).add;\
)\
\
\cf4 Synth\cf3 (\cf5 \\six\cf3 )\
\cf2 //experiment with different ugens and binary operators\cf3 \
\cf2 //might get loud careful if using headphones\cf3 \
\
\
\cf2 //rd_dot quark - draw a schematic of a synthdef\cf3 \
\cf4 Quarks\cf3 .checkoutAll\
\cf4 Quarks\cf3 .gui\
\cf2 //install quark called rd_dot\cf3 \
\cf2 //install Graphviz application 2.26 http://www.graphviz.org/\cf3 \
\
(\
a= \cf4 SynthDef\cf3 (\cf5 \\seven\cf3 , \{\cf4 |freq= 500, amp= 0.4, pan= 0|\cf3 \
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(0.1, 2), doneAction:2);\
	\cf4 var\cf3  src= \cf4 SinOsc\cf3 .ar(freq*env, 0, amp).round(\cf4 SinOsc\cf3 .ar(40, 0, env));\
	\cf4 Out\cf3 .ar(0, \cf4 Pan2\cf3 .ar(src*env, pan));\
\}).add;\
)\
\cf4 Synth\cf3 (\cf5 \\seven\cf3 )\
a.draw\
\
\
}