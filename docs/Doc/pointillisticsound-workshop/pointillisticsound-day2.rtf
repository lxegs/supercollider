{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf2 //pointillistic sound @hangar 101008-101010  /f0\cf3 \
\
\
\cf2 //routines, grains and global control (cloud shape)\cf3 \
\
(\
r= \cf4 Routine\cf3 (\{\
	100.postln;			\cf2 //print 100\cf3 \
	1.wait;				\cf2 //wait for 1 second\cf3 \
	200.postln;			\cf2 //print 200\cf3 \
	1.wait;				\cf2 //wait for 1 second\cf3 \
	300.postln;\
	0.4.wait;				\cf2 //wait for 400 milliseconds\cf3 \
	\cf5 "finished"\cf3 .postln;\
\})								\cf2 //finished\cf3 \
)\
\
r.play\
r.reset\
r.play\
r.stop\
\
\
\cf2 //task is a routine that can pause and resume\cf3 \
(\
r= \cf4 Task\cf3 (\{\
	100.postln;\
	1.wait;\
	200.postln;\
	1.wait;\
	300.postln;\
	0.4.wait;\
	\cf5 "finished"\cf3 .postln;\
\})\
)\
\
r.play\
r.pause\
r.resume\
r.stop\
\
\
\
\cf2 //making a test sound\cf3 \
s.boot		\cf2 //starts scserver\cf3 \
\
(\
\cf4 SynthDef\cf3 (\cf6 \\ping\cf3 , \{\cf4 |freq= 500, amp= 0.1|\cf3 \
	\cf4 var\cf3  src= \cf4 SinOsc\cf3 .ar(freq, 0, amp);\
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(0.01, 0.1), doneAction:2);\
	\cf4 Out\cf3 .ar(0, \cf4 Pan2\cf3 .ar(src*env));\
\}).add;\
)\
\cf4 Synth\cf3 (\cf6 \\ping\cf3 )		\cf2 //here test that it produces sound\cf3 \
\
\
(\
r= \cf4 Task\cf3 (\{\
	\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , 400]);\
	1.wait;\
	\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , 700]);\
	0.5.wait;\
	\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , 600]);\
	0.25.wait;\
	\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , 1000.rand]);\
	0.125.wait;\
	\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , 500]);\
\})\
)\
	\
r.play\
r.reset\
r.play\
\
\
\cf2 //number .do method is useful for iteration\cf3 \
\cf2 //.do argument names can be anything but we will use index\cf3 \
(\
r= \cf4 Task\cf3 (\{\
	12.do\{\cf4 |anythn|\cf3  anythn.postln; 0.25.wait\};\
\})\
)\
r.play\
\
(\
r= \cf4 Task\cf3 (\{\
	12.do\{\cf4 |index|\cf3  \cf4 Synth\cf3 (\cf6 \\ping\cf3 ); 0.25.wait\};\
\})\
)\
r.play\
\
(\
r= \cf4 Task\cf3 (\{\
	12.do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , index*100+400]);\
		0.25.wait\
	\};\
\})\
)\
r.play\
r.pause\
r.resume\
\
\
\cf2 //exercise: make a sort of bouncing ball sound that falls in frequency and waits shorter and shorter between\cf3 \
(\
r= \cf4 Task\cf3 (\{\
	\cf4 var\cf3  num= 50;\
	num.do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , index.linexp(0, num-1, 5000, 500)]);\
		index.linexp(0, num-1, 0.75, 0.125).wait;\
	\};\
\})\
)\
r.play\
\
\
\cf2 //adding some randomness ti the wait times\cf3 \
(\
r= \cf4 Task\cf3 (\{\
	\cf4 var\cf3  num= 50;		\cf2 //number of pings\cf3 \
	\cf4 var\cf3  time= 1;		\cf2 //starting wait time\cf3 \
	num.do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , index.linexp(0, num-1, 5000, 500)]);\
		time.wait;\
		time= time*0.75.rrand(0.95);\
		time.postln;\
	\};\
\})\
)\
r.play\
\
\
\
\cf2 //two iterations after each other within the same task\cf3 \
(\
r= \cf4 Task\cf3 (\{\
	\cf4 var\cf3  num= 50;		\cf2 //number of pings\cf3 \
	\cf4 var\cf3  time= 1;		\cf2 //starting wait time\cf3 \
	num.do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , index.linexp(0, num-1, 5000, 500)]);\
		time.wait;\
		time= time*0.75.rrand(0.95);\
		time.postln;\
	\};	\
	0.5.wait;				\cf2 //optional wait time between segments\cf3 \
	num= 30.rrand(40);	\cf2 //also possible to change number of ping here\cf3 \
	time= 0.01;			\cf2 //reset time variable\cf3 \
	num.do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , index.linexp(0, num-1, 500, 5000)]);\
		time.wait;\
		time= time*1.06;		\cf2 //6% faster every time\cf3 \
		time.postln;\
	\};\
\})\
)\
r.play\
\
\
\
\
\cf2 //grains - sclang scheduling\cf3 \
(\
t= \cf4 Task\cf3 (\{\
	99999.do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , 200.0.rrand(220), \cf6 \\amp\cf3 , 0.1.rrand(0.25)]);\
		0.01.rrand(0.03).wait;\
	\};\
\})\
)\
t.play\
t.pause\
t.resume\
t.stop\
\
\
(\
t= \cf4 Task\cf3 (\{\
	99999.do\{\cf4 |index|\cf3 \
		if(0.1.coin, \{		\cf2 //condition.  10% chance of true\cf3 \
			\cf2 //true - play high sound\cf3 \
			\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , 400.0.rrand(440), \cf6 \\amp\cf3 , 0.01.rrand(0.11)]);\
		\}, \{\
			\cf2 //false - play low sound\cf3 \
			\cf4 Synth\cf3 (\cf6 \\ping\cf3 , [\cf6 \\freq\cf3 , 200.0.rrand(220), \cf6 \\amp\cf3 , 0.05.rrand(0.15)]);\
		\});\
		0.01.rrand(0.03).wait;\
	\};\
\})\
)\
t.play	\
t.stop\
\
\
\cf2 //a refined test sound\cf3 \
(\
\cf4 SynthDef\cf3 (\cf6 \\pingPan\cf3 , \{\cf4 |freq= 500, amp= 0.1, pan= 0, atk= 0.01, rel= 0.1|\cf3 \
	\cf4 var\cf3  src= \cf4 SinOsc\cf3 .ar(freq, 0, amp);\
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(atk, rel), doneAction:2);\
	\cf4 Out\cf3 .ar(0, \cf4 Pan2\cf3 .ar(src*env, pan));\
\}).add;\
)\
\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\pan\cf3 , 1, \cf6 \\rel\cf3 , 0.6])		\cf2 //right\cf3 \
\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\pan\cf3 , -1, \cf6 \\rel\cf3 , 0.6])		\cf2 //left\cf3 \
\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\pan\cf3 , 0, \cf6 \\rel\cf3 , 0.6])		\cf2 //middle\cf3 \
\
(\
t= \cf4 Task\cf3 (\{\
	99999.do\{\cf4 |index|\cf3 \
		\cf4 var\cf3  ourWait;\
		if(0.1.coin, \{\
			\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\freq\cf3 , 400.0.rrand(440), \cf6 \\amp\cf3 , 0.01.rrand(0.11), \cf6 \\pan\cf3 , 1.0.rand2, \cf6 \\rel\cf3 , 0.7]);	\cf2 //pan position random between -1.0 and 1.0\cf3 \
			ourWait= 0.1.rrand(0.14);\
		\}, \{\
			\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\freq\cf3 , 200.0.rrand(220), \cf6 \\amp\cf3 , 0.05.rrand(0.15), \cf6 \\pan\cf3 , 0.1.rand2]);	\cf2 //pan position random between -0.1 and 0.1\cf3 \
			ourWait= 0.01.rrand(0.03);\
		\});\
		ourWait.wait;\
	\};\
\})\
)\
t.play\
t.stop\
\
1.0.rand			\cf2 //0.0 to 1.0\cf3 \
1.0.rand2			\cf2 //bipolar random -1.0 to 1.0\cf3 \
1.0.rrand(2.0)	\cf2 //range random 1.0 to 2.0\cf3 \
50.gauss(0.2)		\cf2 //gaussian distribution around 50\cf3 \
50.linrand			\cf2 //more low values\cf3 \
\
\
(\
t= \cf4 Task\cf3 (\{\
	99999.do\{\cf4 |index|\cf3 \
		\cf4 var\cf3  ourWait, currFreq;\
		currFreq= 200.0.rrand(400);\
		if(currFreq>300, \{	\cf2 //decision based on frequency\cf3 \
			\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\freq\cf3 , currFreq, \cf6 \\amp\cf3 , 0.01.rrand(0.11), \cf6 \\pan\cf3 , 1.0.rand2, \cf6 \\rel\cf3 , 0.7]);\
			ourWait= 0.1.rrand(0.14);\
		\}, \{\
			\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\freq\cf3 , currFreq, \cf6 \\amp\cf3 , 0.05.rrand(0.15), \cf6 \\pan\cf3 , 0.1.rand2]);\
			ourWait= 0.01.rrand(0.03);\
		\});\
		ourWait.wait;\
	\};\
\})\
)\
t.play\
t.stop\
\
\
\cf2 //pitch slowly rises, pan position slowly shifts from left to right\cf3 \
(\
t= \cf4 Task\cf3 (\{\
	99999.do\{\cf4 |index|\cf3 \
		\cf4 var\cf3  ourWait;\
		if(0.1.coin, \{\
			\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\freq\cf3 , 400.rrand(400+(index%1000)), \cf6 \\amp\cf3 , 0.01.rrand(0.11), \cf6 \\pan\cf3 , (index%1000).linlin(0, 1000, -1.0, 1.0)+0.1.rand2, \cf6 \\rel\cf3 , 0.7]);\
			ourWait= 0.1.rrand(0.14);\
		\}, \{\
			\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\freq\cf3 , 200.0.rrand(220), \cf6 \\amp\cf3 , 0.05.rrand(0.15), \cf6 \\pan\cf3 , 0.1.rand2]);\
			ourWait= 0.01.rrand(0.03);\
		\});\
		ourWait.wait;\
	\};\
\})\
)\
t.play\
t.stop\
\
\
\cf2 //different sound based on noise\cf3 \
(\
\cf4 SynthDef\cf3 (\cf6 \\noise\cf3 , \{\cf4 |cutoff= 900, width= 0.3, amp= 0.3, atk= 0.01, rel= 0.1, pan= 0|\cf3 \
	\cf4 var\cf3  src= \cf4 WhiteNoise\cf3 .ar(amp);\
	\cf4 var\cf3  efx= \cf4 BPF\cf3 .ar(src, cutoff, width);\
	\cf4 var\cf3  env= \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc(atk, rel), doneAction:2);\
	\cf4 Out\cf3 .ar(0, \cf4 Pan2\cf3 .ar(efx*env, pan));\
\}).add;\
)\
\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 0.05, \cf6 \\amp\cf3 , 0.9, \cf6 \\atk\cf3 , 0.0001])\
\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 0.1, \cf6 \\amp\cf3 , 0.9, \cf6 \\atk\cf3 , 0.01])\
\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 1, \cf6 \\amp\cf3 , 0.9, \cf6 \\atk\cf3 , 0.001])\
\
(\
r= \cf4 Task\cf3 (\{\
	40.do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 0.1, \cf6 \\amp\cf3 , 0.5, \cf6 \\cutoff\cf3 , 5000.rand]);\
		0.1.wait;\
	\};\
\})\
)\
r.play\
r.stop\
r.reset\
\
\
\cf2 //blocks of textures\cf3 \
(\
r= \cf4 Task\cf3 (\{\
	40.do\{\
		\cf2 //muddy low sounds\cf3 \
		\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 0.2, \cf6 \\amp\cf3 , 0.4, \cf6 \\cutoff\cf3 , 50.rrand(500), \cf6 \\rel\cf3 , 0.4, \cf6 \\atk\cf3 , 0.1]);\
		0.1.wait;\
	\};\
	60.do\{\
		\cf2 //dense texture\cf3 \
		\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 0.1, \cf6 \\amp\cf3 , 0.5, \cf6 \\cutoff\cf3 , 5000+100.rand, \cf6 \\atk\cf3 , 0.005, \cf6 \\rel\cf3 , 0.15]);\
		0.02.wait;\
	\};\
	5.do\{\
		\cf2 //slow long\cf3 \
		\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 0.05, \cf6 \\amp\cf3 , 0.7, \cf6 \\cutoff\cf3 , 5000.rand, \cf6 \\rel\cf3 , 1]);\
		0.7.wait;\
	\};\
	70.do\{\
		\cf2 //random freq\cf3 \
		\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 0.1, \cf6 \\amp\cf3 , 0.5, \cf6 \\cutoff\cf3 , 10000.rand]);\
		0.05.wait;\
	\};\
\})\
)\
r.play\
r.stop\
r.reset\
\
\
(\
r= \cf4 Task\cf3 (\{\
	4.do\{		\cf2 //number of blocks\cf3 \
		\cf4 var\cf3  num= 5.rrand(50).postln;\cf2 //number of grains per block\cf3 \
		\cf4 var\cf3  cut= 50.rrand(10000);\cf2 //cutoff frequency for all grains in block\cf3 \
		\cf4 var\cf3  time= 0.3.rand;\cf2 //maximum wait time in block\cf3 \
		\cf4 var\cf3  wid= 0.1.rrand(0.8);\cf2 //filter width in block\cf3 \
		num.do\{\
			\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , wid, \cf6 \\amp\cf3 , 0.5, \cf6 \\cutoff\cf3 , cut]);\
			time.rand.wait;\
		\};\
	\};\
\})\
)\
r.play\
r.stop\
r.reset\
\
\
(\
r= \cf4 Task\cf3 (\{\
	10.do\{\
		\cf4 var\cf3  num= 1.rrand(10).postln;\
		\cf4 var\cf3  minCut= 100.rrand(500);\
		\cf4 var\cf3  maxCut= 700.rrand(7000);\
		\cf4 var\cf3  minWid= 0.05.rrand(0.2);\
		\cf4 var\cf3  maxWid= 0.1.rrand(1.2);\
		\cf4 var\cf3  minRel= 0.01.rrand(0.1);\
		\cf4 var\cf3  maxRel= 0.1.rrand(0.7);\
		num.do\{\
			\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , minWid.rrand(maxWid), \cf6 \\amp\cf3 , 0.5, \cf6 \\cutoff\cf3 , minCut.rrand(maxCut), \cf6 \\rel\cf3 , minRel.rrand(maxRel)]);\
			(5/10/num).wait;	\cf2 //spread out grains evenly\cf3 \
		\};\
	\};\
\})\
)\
r.play\
r.stop\
r.reset\
\
\
\
\cf2 //starting and stopping different tasks\cf3 \
(\
a= \cf4 Task\cf3 (\{\
	50.do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 0.1.rrand(0.15), \cf6 \\cutoff\cf3 , 200.rrand(250), \cf6 \\rel\cf3 , 0.5.rrand(0.6)]);\
		0.01.wait;\
	\};\
\});\
b= \cf4 Task\cf3 (\{\
	20.do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 0.01, \cf6 \\cutoff\cf3 , 5000.rrand(7000), \cf6 \\atk\cf3 , 0, \cf6 \\rel\cf3 , 0.1, \cf6 \\amp\cf3 , 2]);\
		0.1.rand.wait;\
	\};\
\});\
c= \cf4 Task\cf3 (\{\
	\cf4 inf\cf3 .do\{\cf4 |index|\cf3 \
		\cf4 Synth\cf3 (\cf6 \\noise\cf3 , [\cf6 \\width\cf3 , 1, \cf6 \\cutoff\cf3 , 200.rrand(400), \cf6 \\atk\cf3 , 0, \cf6 \\rel\cf3 , 0.01, \cf6 \\amp\cf3 , 1.5]);\
		0.05.wait;\
	\};\
\});\
d= \cf4 Task\cf3 (\{\
	99999.do\{\cf4 |index|\cf3 \
		\cf4 var\cf3  ourWait;\
		if(0.1.coin, \{\
			\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\freq\cf3 , 400.rrand(400+index), \cf6 \\amp\cf3 , 0.01.rrand(0.11), \cf6 \\pan\cf3 , index.linlin(0, 1000, -1.0, 1.0)+0.1.rand2, \cf6 \\rel\cf3 , 0.7]);\
			ourWait= 0.1.rrand(0.14);\
		\}, \{\
			\cf4 Synth\cf3 (\cf6 \\pingPan\cf3 , [\cf6 \\freq\cf3 , 200.0.rrand(220), \cf6 \\amp\cf3 , 0.05.rrand(0.15), \cf6 \\pan\cf3 , 0.1.rand2]);\
			ourWait= 0.01.rrand(0.03);\
		\});\
		ourWait.wait;\
	\};\
\})\
)\
d.play\
c.play\
\
a.reset; a.play;\
b.reset; b.play;\
a.reset; a.play;\
b.reset; b.play;\
\
c.stop\
d.stop\
\
\
\
\cf2 //scheduling using a beat based tempo clock\cf3 \
z= \cf4 TempoClock\cf3 (150/60);	\cf2 //create a clock/scheduler with tempo 114 bpm\cf3 \
(\
q= \cf4 Task\cf3 (\{		\cf2 //metronome\cf3 \
	8.do\{\
		\cf4 Synth\cf3 (\cf6 \\ping\cf3 );\
		1.wait;\
	\};\
\});\
r= \cf4 Task\cf3 (\{		\cf2 //wait times in beats\cf3 \
	c.play;\
	4.wait;\
	c.stop;\
	\
	a.reset;\
	a.play;\
	1.wait;\
	a.stop;\
	\
	2.wait;\
	\
	b.reset;\
	b.play;\
	1.wait;\
	b.stop;\
\})\
)\
(\
q.reset; q.play(z);\
r.reset; r.play(z);\
)\
\
z.tempo= 104/60		\cf2 //now change tempo\cf3 \
(						\cf2 //and play again\cf3 \
q.reset; q.play(z);\
r.reset; r.play(z);\
)\
}